<UserControl x:Class="Snake.App.Controls.MultiSelectComboBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ComboBox
        x:Name="MultiSelectCombo"  
        SnapsToDevicePixels="True"
        OverridesDefaultStyle="True"
        ScrollViewer.HorizontalScrollBarVisibility="Auto"
        ScrollViewer.VerticalScrollBarVisibility="Auto"
        ScrollViewer.CanContentScroll="True"
        IsSynchronizedWithCurrentItem="True">

        <!-- 设置ComboBox下拉列表Item的样式模板 -->
        <ComboBox.ItemTemplate>
            <!-- 下拉列表Item的样式数据模板绑定CheckBox -->
            <DataTemplate>
                <CheckBox Content="{Binding Title}" IsChecked="{Binding Path=IsSelected, Mode=TwoWay}" Tag="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}" Click="CheckBox_Click"/>
            </DataTemplate>
        </ComboBox.ItemTemplate>

        <!-- 设置整个ComboBox的样式模板 -->
        <!-- 该样式模板由两部分组成，一个是ToggleButton,一个是Popup -->
        <ComboBox.Template>
            <ControlTemplate TargetType="ComboBox">
                <Grid >

                    <!-- 设置ToggleButton的样式模板，IsChecked：该属性与Combox下拉列表是否打开的状态绑定 -->
                    <ToggleButton x:Name="ToggleButton" Grid.Column="2" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                        Focusable="false" ClickMode="Press" HorizontalContentAlignment="Left" >
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid>
                                    <!-- 该Grid分为两列，一列放多选的显示文本，一列放箭头图标 -->
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="18"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- Border相当于html中的Span标签， ColumnSpan：该Border跨两列，CornerRadius：设置ToggleButton圆角样式的弧度。按代码位置，该Border在最上层。-->
                                    <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" Background="White" BorderBrush="Black" BorderThickness="1,1,1,1">
                                    </Border>

                                    <!-- 该Border绑定了一个TextBlock(文本块)，TextBlock绑定.xaml.cs文件中的Text属性。Text显示的是多选的内容 -->
                                    <Border x:Name="BorderComp" Grid.Column="0" CornerRadius="2" Margin="1" BorderBrush="Black" BorderThickness="0,0,0,0" >
                                        <TextBlock Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Padding="3" />
                                    </Border>

                                    <!-- 用来显示上下箭头的 -->
                                    <Path x:Name="Arrow" Grid.Column="1" Stroke="Black" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Grid>
                                
                                <!-- 触发器，如果ToggleButton的IsChecked属性为false，显示像下箭头，如果ToggleButton的IsChecked属性为True，显示像上箭头 -->
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsChecked" Value="false">
                                        <Setter Property="Data" TargetName="Arrow" Value="M 1 5 L 8 12 L 15 5"></Setter>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Data" TargetName="Arrow" Value="M 1 12 L 8 5 L 15 12"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>

                    <!-- 设置Popup的样式模板，IsOpen:该属性与ComboBox下拉列表是否打开的属性绑定，Placement：Popup弹出位置，在底部；AllowsTransparency：获取或设置一个值,该值表示 Popup 控件是否可以包含透明的部分 -->
                    <!-- Popup是弹出框，类似于Windows的开始菜单，点击一下，弹出来，在点击一下收回去 -->
                    <Popup Name="Popup" Placement="Bottom" AllowsTransparency="True" Focusable="False"  IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide">
                        <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="DropDownBorder" BorderThickness="1" Background="White" BorderBrush="Black"/>
                            <!-- 添加滚动条 -->
                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" DataContext="{Binding}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Grid>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasItems" Value="false">
                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                    </Trigger>

                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                        <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                        <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ComboBox.Template>
    </ComboBox>
</UserControl>
