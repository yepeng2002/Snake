<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Snake.Core</name>
    </assembly>
    <members>
        <member name="P:Snake.Core.Common.Singleton`1.Instance">
            <summary>
            Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:Snake.Core.Common.Singleton`1.Initialize(`0)">
            <summary>
            Initializes the specified customer cache.
            </summary>
            <param name="instance">The customer cache.</param>
        </member>
        <member name="M:Snake.Core.Common.Singleton`1.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Snake.Core.Configurations.RabbitMQConfiguration.#cctor">
            <summary>
            Initializes the <see cref="T:System.Configuration.Configuration"/> class.
            </summary>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.HostName">
            <summary>
            Gets the HostName of RabbitMQ.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.UserName">
            <summary>
            Gets the UserName of RabbitMQ.
            </summary>
            <value>The display name of the service.</value>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.Password">
            <summary>
            Gets the Password of RabbitMQ.
            </summary>
            <value>The service description.</value>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.ConsumerNum">
            <summary>
            消费者个数
            </summary>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.UseRetryNum">
            <summary>
            重试次数
            </summary>
        </member>
        <member name="P:Snake.Core.Configurations.RabbitMQConfiguration.UseRateLimit">
            <summary>
            每分钟限数器
            </summary>
        </member>
        <member name="M:Snake.Core.Configurations.RabbitMQConfiguration.GetConfigurationOrDefault(System.String,System.String)">
            <summary>
            Returns configuration value with given key. If configuration
            for the does not exists, return the default value.
            </summary>
            <param name="configurationKey">Key to read configuration with.</param>
            <param name="defaultValue">Default value to return if configuration is not found</param>
            <returns>The configuration value.</returns>
        </member>
        <member name="T:Snake.Core.Enums.LogCategory">
            <summary>
            日志分类
            </summary>
        </member>
        <member name="F:Snake.Core.Enums.LogCategory.Debug">
            <summary>
            Debug category.
            </summary>
        </member>
        <member name="F:Snake.Core.Enums.LogCategory.Info">
            <summary>
            Info category.
            </summary>
        </member>
        <member name="F:Snake.Core.Enums.LogCategory.Warn">
            <summary>
            Warn category.
            </summary>
        </member>
        <member name="F:Snake.Core.Enums.LogCategory.Error">
            <summary>
            Error category.
            </summary>
        </member>
        <member name="F:Snake.Core.Enums.LogCategory.Fatal">
            <summary>
            Fatal category.
            </summary>
        </member>
        <member name="T:Snake.Core.Enums.ServiceResultCode">
            <summary>
            服务返回结果状态编号
            1：成功；2：无数据；3：参数校验错误；255：其他错误；
            </summary>
        </member>
        <member name="T:Snake.Core.Events.AppLogCreatedEvent">
            <summary>
            新增应用日志时间实体类
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.CTime">
            <summary>
            日志生成时间
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.Application">
            <summary>
            应用标识
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.AppPath">
            <summary>
            应用路径
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.IPv4">
            <summary>
            内网IP
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.Machine">
            <summary>
            机器名
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.LogCategory">
            <summary>
            日志类别: Debug, Info, Warn, Error, Fatal
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.Message">
            <summary>
            日志消息内容
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.Level">
            <summary>
            级别：1,2,3,4,5
            级别越小越重要
            1：发送短信提醒
            2：发送邮件提醒
            3,4,5：无
            </summary>
        </member>
        <member name="P:Snake.Core.Events.AppLogCreatedEvent.Tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="T:Snake.Core.Events.NotifyEntity">
            <summary>
            Notify基类
            </summary>
        </member>
        <member name="E:Snake.Core.Events.NotifyEntity.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Snake.Core.Events.NotifyEntity.NotifyPropertyChanged(System.String)">
            <summary>
            基于属性名的实现
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Snake.Core.Events.NotifyEntity.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            基于Lambda实现
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
        </member>
        <member name="T:Snake.Core.Events.TrackLogCreatedEvent">
            <summary>
            新增api监控日志事件实体
            </summary>
        </member>
        <member name="M:Snake.Core.Ioc.IocContainer.GetService(System.String)">
            <summary>
            根据服务名得到服务
            <remarks>
            </remarks>
            </summary>
            <param name="servicename"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Ioc.IocContainer.GetService(System.Type)">
            <summary>
            根据类型得到服务
            <remarks>
            
            </remarks>
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Ioc.IocContainer.GetService``1">
            <summary>
            根据类型得到服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Ioc.IocContainer.Release(System.Object)">
            <summary>
            释放对象
            </summary>
            <param name="o"></param>
        </member>
        <member name="T:Snake.Core.Models.IAppLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Snake.Core.Models.ITrackLog.ExecutedTime">
            <summary>
            执行时间 ms
            </summary>
        </member>
        <member name="T:Snake.Core.Models.AppLog">
            <summary>
            应用日志 CreatedEvent
            Mongodb集合：AppLog
            </summary>
        </member>
        <member name="T:Snake.Core.Models.PageAppLog">
            <summary>
            带分页的applog实体
            </summary>
        </member>
        <member name="P:Snake.Core.Models.PageAppLog.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:Snake.Core.Models.PageAppLog.PageSize">
            <summary>
            每页记录条数
            </summary>
        </member>
        <member name="P:Snake.Core.Models.PageAppLog.CTimeEnd">
            <summary>
            日志生成时间
            </summary>
        </member>
        <member name="T:Snake.Core.Models.QueryParamDto">
            <summary>
            
            </summary>
        </member>
        <member name="T:Snake.Core.Models.TrackLog">
            <summary>
            mongodb: api日志数据集
            </summary>
        </member>
        <member name="T:Snake.Core.Models.TransData`1">
            <summary>
            响应结果实体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Snake.Core.Models.TransData`1.Code">
            <summary>
            请求响应结果编码
            </summary>
        </member>
        <member name="T:Snake.Core.Redis.CacheAppLogSet">
            <summary>
            AppLog缓存集合名
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.CacheAppLogSet.Application">
            <summary>
            Application缓存集合id
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.CacheAppLogSet.Tags">
            <summary>
            Tags缓存集合id
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.WriteServerList">
            <summary>
            可写的Redis链接地址
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.ReadServerList">
            <summary>
            可读的Redis链接地址
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.MaxWritePoolSize">
            <summary>
            最大写链接数
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.MaxReadPoolSize">
            <summary>
            最大读链接数
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.DefaultDb">
            <summary>
            默认DB位置
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.AutoStart">
            <summary>
            自动重启
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.LocalCacheTime">
            <summary>
            本地缓存到期时间，单位:秒
            </summary>
        </member>
        <member name="P:Snake.Core.Redis.RedisConfigInfo.RecordeLog">
            <summary>
            是否记录日志,该设置仅用于排查redis运行时出现的问题,如redis工作正常,请关闭该项
            </summary>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Add(System.String,System.Object)">
            <summary>
            添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddAsync(System.String,System.Object)">
            <summary>
            异步添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Add(System.String,System.Object,System.Boolean)">
            <summary>
            添加k/v值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="defaultExpire">默认配置失效时间</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddAsync(System.String,System.Object,System.Boolean)">
            <summary>
            异步添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="defaultExpire">默认配置失效时间</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Add(System.String,System.Object,System.Int64)">
            <summary>
            添加k/v值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="numOfMinutes">默认配置失效时间</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddAsync(System.String,System.Object,System.Int64)">
            <summary>
            异步添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="numOfMinutes">默认配置失效时间</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加k/v值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="timeSpan">配置时间间隔</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddAsync(System.String,System.Object,System.TimeSpan)">
            <summary>
            异步添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="timeSpan">配置时间间隔</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Add(System.String,System.Object,System.Int64,System.Boolean)">
            <summary>
            添加k/v值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="numOfMinutes">配置时间间隔</param>
            <param name="flag">标识是否永不过期（NETCache本地缓存有效）</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddAsync(System.String,System.Object,System.Int64,System.Boolean)">
            <summary>
            异步添加K/V值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="numOfMinutes">配置时间间隔</param>
            <param name="flag">标识是否永不过期（NETCache本地缓存有效）</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Get``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据KEY键集合获取返回对象集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="keys">KEY值集合</param>
            <returns>需要返回的对象集合</returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.GetAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据KEY键集合异步获取返回对象集合
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="keys">KEY值集合</param>
            <returns>需要返回的对象集合</returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Get(System.String)">
            <summary>
            根据KEY键获取返回对象
            </summary>
            <param name="key">KEY值</param>
            <returns>需要返回的对象</returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.GetAsync(System.String)">
            <summary>
            根据KEY异步获取返回对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Get``1(System.String)">
            <summary>
            根据KEY键获取返回指定的类型对象
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">KEY值</param>
            <returns>需要返回的对象</returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.GetAsync``1(System.String)">
            <summary>
            根据KEY异步获取指定的类型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.GetCacheTryParse(System.String,System.Object@)">
            <summary>
            根据KEY键获取转化成指定的对象，指示获取转化是否成功的返回值
            </summary>
            <param name="key">KEY键</param>
            <param name="obj">需要转化返回的对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.Remove(System.String)">
            <summary>
            根据KEY键删除缓存
            </summary>
            <param name="key">KEY键</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.RemoveAsync(System.String)">
            <summary>
            根据KEY键异步删除缓存
            </summary>
            <param name="key">KEY键</param>
        </member>
        <member name="M:Snake.Core.Redis.RedisProvider.AddItemToSet(System.String,System.String)">
            <summary>
            对Set类型进行插入item操作
            </summary>
            <param name="setId"></param>
            <param name="item"></param>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.Parse2(System.String)">
            <summary>
            解析日期字符串，如果解析不成功则返回null
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.Parse(System.String)">
            <summary>
            解析日期字符串，如果解析不成功则返回DateTime.MinValue
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.Parse(System.Int32)">
            <summary>
            解析yyyMMdd这样格式的整形，并转成相应的日期，转换失败则返回DateTime.MinValue
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.GetWeeksOfDate(System.DateTime)">
            <summary>
            取得某日期是该月的第几周，每周以星期天开始。
            </summary>
            <param name="d">给定日期</param>
            <returns>返回整数1-6，表示该日期在该月为第几周。</returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.GetSpecificDayOfMonth(System.DateTime,System.Int32,System.DayOfWeek)">
            <summary>
             取得给定日期所在月的第i个周几(i从1-5代表第一到第五个，-1代表最后一个，）
            </summary>
            <param name="d">给定日期</param>
            <param name="i">第几周(i从1-5代表第一到第五个，-1代表最后一个，）</param>
            <param name="j">周几</param>
            <returns>给定日期所在月的第i个周j</returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.ConvertStringToShortDateString(System.String)">
            <summary>
            解析并处理含特殊字符的字符串如果是日期则返回短日期格式字符串，如果解析不成功则返回空值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.TodayFormatWithWeek(System.DateTime)">
            <summary>
            返回带星期的中文格式日期
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.IsDate(System.String)">
            <summary>
            判断字符串是否为日期
            </summary>
            <param name="strDate"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.GetWeekNumber(System.DateTime)">
            <summary>
            获取日期是一年中第几个星期
            </summary>
            <param name="date">需要计算的时间</param>
            <returns>一年中第几个星期</returns>
        </member>
        <member name="M:Snake.Core.Util.DateHelper.GetDayListByWeekNumberOfYear(System.String,System.Int32)">
            <summary>
            根据一年中的第几周返回该周的相关日期集合
            </summary>
            <param name="strYear"></param>
            <param name="WeekNumber"></param>
        </member>
        <!-- 对于成员“T:Snake.Core.Util.EncryptHelper”忽略有格式错误的 XML 注释 -->
        <member name="M:Snake.Core.Util.EncryptHelper.PoylinkMD5Str(System.String)">
            <summary>
            PoyLink系统MD5加密方法
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelper.MD5Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelper.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelper.Base64Desencrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelper.DESEncrypt(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="data">内容</param>
            <param name="key">秘匙</param>
            <param name="val">向量</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelper.DESDecrypt(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">内容</param>
            <param name="key">秘匙</param>
            <param name="val">向量</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.RSAKey(System.String,System.String)">
            <summary>
            生成公私钥
            </summary>
            <param name="PrivateKeyPath"></param>
            <param name="PublicKeyPath"></param>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.GetHash(System.String)">
            <summary>
            对原始数据进行MD5加密
            </summary>
            <param name="m_strSource">待加密数据</param>
            <returns>返回机密后的数据</returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.RSAEncrypt(System.String,System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="xmlPublicKey">公钥</param>
            <param name="m_strEncryptString">RSA加密后的数据</param>
            <returns>RSA公钥加密后的数据</returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.RSADecrypt(System.String,System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="xmlPrivateKey">私钥</param>
            <param name="m_strDecryptString">待解密的数据</param>
            <returns>解密后的结果</returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.SignatureFormatter(System.String,System.String)">
            <summary>
            对MD5加密后的密文进行签名
            </summary>
            <param name="p_strKeyPrivate">私钥</param>
            <param name="m_strHashbyteSignature">MD5加密后的密文</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            签名验证
            </summary>
            <param name="p_strKeyPublic">公钥</param>
            <param name="p_strHashbyteDeformatter">待验证的用户名</param>
            <param name="p_strDeformatterData">注册码</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.GetHardID">
            <summary>
            获取硬盘ID
            </summary>
            <returns>硬盘ID</returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.ReadReg(System.String)">
            <summary>
            读注册表中指定键的值
            </summary>
            <param name="key">键名</param>
            <returns>返回键值</returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.WriteReg(System.String,System.String)">
            <summary>
            创建注册表中指定的键和值
            </summary>
            <param name="key">键名</param>
            <param name="value">键值</param>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.CreatePublicKeyXML(System.String,System.String)">
            <summary>
            创建公钥文件
            </summary>
            <param name="path"></param>
            <param name="publickey"></param>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.CreatePrivateKeyXML(System.String,System.String)">
            <summary>
            创建私钥文件
            </summary>
            <param name="path"></param>
            <param name="privatekey"></param>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.ReadPublicKey(System.String)">
            <summary>
            读取公钥
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.ReadPrivateKey(System.String)">
            <summary>
            读取私钥
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.EncryptHelperEx.InitialReg(System.String)">
            <summary>
            初始化注册表，程序运行时调用，在调用之前更新公钥xml
            </summary>
            <param name="path">公钥路径</param>
        </member>
        <member name="T:Snake.Core.Util.HttpRequestMessageExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Snake.Core.Util.HttpRequestMessageExtensions.GetClientIpAddress(System.Net.Http.HttpRequestMessage)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.HttpRequestMessageExtensions.IsIPAddress(System.String)">
             <summary>
             判断是否是IP地址格式  0.0.0.0
             </summary>
             <param  name="str1">待判断的IP地址</param>
             <returns>true  or  false</returns>
        </member>
        <member name="M:Snake.Core.Util.JsonHelper.SerializeObject(System.Object)">
            <summary>
            序列化对象成JSON字符串
            </summary>
            <param name="value">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.JsonHelper.DeserializeObject``1(System.String)">
            <summary>
            将JSON字符串序列化成对象
            </summary>
            <param name="value">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.MapperProvider.MapTo``1(System.Object)">
            <summary>
             类型映射
            </summary>
        </member>
        <member name="M:Snake.Core.Util.MapperProvider.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:Snake.Core.Util.MapperProvider.MapToList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:Snake.Core.Util.MapperProvider.MapTo``2(``0,``1)">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="F:Snake.Core.Util.StringHelper.SeparatorChar">
            <summary>
            ；
            </summary>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.SubstringAfter(System.String,System.String)">
            <summary>
            获取指定分隔符第一次出现以后的子字符串
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.SubstringAfterLast(System.String,System.String)">
            <summary>
            获取指定分隔符最后一次出现以后的子字符串
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.SubstringBefore(System.String,System.String)">
            <summary>
            获取指定分隔符第一次出现以前的子字符串
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.SubstringBeforeLast(System.String,System.String)">
            <summary>
            获取指定分隔符最后一次出现以前的子字符串
            </summary>
            <param name="str">字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.Toint(System.String)">
            <summary>
            将字符串转换成int返回
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.ToBool(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.ToMoney(System.String)">
            <summary>
            将字符串转换成decimal保留小数点2位返回
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.ToMoneyString(System.Decimal)">
            <summary>
            将decimal保留小数点2位返回字符串
            </summary>
            <param name=""></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.IsNumber(System.String)">
            <summary>
            判断字符串是否是数字型(包括整型和浮点型)
            </summary>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.ChineseTONumber(System.String)">
            <summary>
            汉字转数字
            </summary>
            <param name="chineseStr1"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.StringHelper.NumberToChinese(System.String)">
            <summary>
            数字转汉字
            </summary>
            <param name="numberStr"></param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.GetParameters(System.String)">
            <summary>
            Gets the parameters from the url.
            </summary>
            <param name="url">The URL.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.EncodeParameter(System.String)">
            <summary>
            Encodes the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.EscapeDataFormat(System.String,System.String)">
            <summary>
            Escapes the data format.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.GetParameter(System.String,System.String)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="url">The URL.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.AppendParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Appends the parameters to the url.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Snake.Core.Util.UrlHelper.RemoveParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Removes the parameters.
            </summary>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Snake.Core.Util.UrlHelper.UrlPart">
            <summary>
            scheme://host:port/path?query#fragment
            </summary>
        </member>
    </members>
</doc>
